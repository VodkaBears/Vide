/*
 *  Vide - v1.0.0
 *  Hella easy jQuery plugin for video backgrounds.
 *  http://vodkabears.github.io/vide/
 *
 *  Made by Ilya Makarov
 *  Under MIT License
 */

/* 
 * Modified by Austin to have the optional height and width options
 */
!function (e, t) { "function" == typeof define && define.amd ? define(["jquery"], t) : t("object" == typeof exports ? require("jquery") : e.jQuery) }(this, function (e) { "use strict"; function t(e) { var t, o, i, n, r, s, a, p = {}; for (a = 0, s = (r = e.replace(/\s*:\s*/g, ":").replace(/\s*,\s*/g, ",").split(",")).length; a < s && -1 === (o = r[a]).search(/^(http|https|ftp):\/\//) && -1 !== o.search(":"); a++)t = o.indexOf(":"), i = o.substring(0, t), (n = o.substring(t + 1)) || (n = void 0), "string" == typeof n && (n = "true" === n || "false" !== n && n), "string" == typeof n && (n = isNaN(n) ? n : +n), p[i] = n; return null == i && null == n ? e : p } function o(e) { var t, o, i, n = (e = "" + e).split(/\s+/), r = "50%", s = "50%"; for (i = 0, t = n.length; i < t; i++)o = n[i], "left" === o ? r = "0%" : "right" === o ? r = "100%" : "top" === o ? s = "0%" : "bottom" === o ? s = "100%" : "center" === o ? 0 === i ? r = "50%" : s = "50%" : 0 === i ? r = o : s = o; return { x: r, y: s } } function i(t, o) { var i = function () { o(this.src) }; e('<img src="' + t + '.gif">').on("load", i), e('<img src="' + t + '.jpg">').on("load", i), e('<img src="' + t + '.jpeg">').on("load", i), e('<img src="' + t + '.png">').on("load", i) } function n(o, i, n) { if (this.$element = e(o), "string" == typeof i && (i = t(i)), n ? "string" == typeof n && (n = t(n)) : n = {}, "string" == typeof i) i = i.replace(/\.\w*$/, ""); else if ("object" == typeof i) for (var r in i) i.hasOwnProperty(r) && (i[r] = i[r].replace(/\.\w*$/, "")); this.settings = e.extend({}, s, n), this.path = i; try { this.init() } catch (e) { if (e.message !== a) throw e } } var r = "vide", s = { volume: 1, playbackRate: 1, muted: !0, loop: !0, autoplay: !0, position: "50% 50%", posterType: "detect", resizing: !0, bgColor: "transparent", className: "" }, a = "Not implemented", p = "", c = ""; n.prototype.init = function () { var t, n, r = this, s = r.path, d = s, u = "", l = r.$element, g = r.settings, h = o(g.position), f = g.posterType; n = r.$wrapper = e("<div>").addClass(g.className).css({ position: "absolute", "z-index": -1, top: 0, left: 0, bottom: 0, right: 0, overflow: "hidden", "-webkit-background-size": "cover", "-moz-background-size": "cover", "-o-background-size": "cover", "background-size": "cover", "background-color": g.bgColor, "background-repeat": "no-repeat", "background-position": h.x + " " + h.y }), "object" == typeof s && (s.poster ? d = s.poster : s.mp4 ? d = s.mp4 : s.webm ? d = s.webm : s.ogv && (d = s.ogv)), "detect" === f ? i(d, function (e) { n.css("background-image", "url(" + e + ")") }) : "none" !== f && n.css("background-image", "url(" + d + "." + f + ")"), "static" === l.css("position") && l.css("position", "relative"), l.prepend(n), "object" == typeof s ? (s.mp4 && (u += '<source src="' + s.mp4 + '.mp4" type="video/mp4">'), s.webm && (u += '<source src="' + s.webm + '.webm" type="video/webm">'), s.ogv && (u += '<source src="' + s.ogv + '.ogv" type="video/ogg">'), t = r.$video = e("<video>" + u + "</video>")) : t = r.$video = e('<video><source src="' + s + '.mp4" type="video/mp4"><source src="' + s + '.webm" type="video/webm"><source src="' + s + '.ogv" type="video/ogg"></video>'); try { t.prop({ autoplay: g.autoplay, loop: g.loop, volume: g.volume, muted: g.muted, defaultMuted: g.muted, playbackRate: g.playbackRate, defaultPlaybackRate: g.playbackRate }), p = null != g.height || void 0 != g.height ? g.height : "auto", c = null != g.height || void 0 != g.height ? g.width : "auto" } catch (e) { throw new Error(a) } t.css({ margin: "auto", position: "absolute", "z-index": -1, top: h.y, left: h.x, "-webkit-transform": "translate(-" + h.x + ", -" + h.y + ")", "-ms-transform": "translate(-" + h.x + ", -" + h.y + ")", "-moz-transform": "translate(-" + h.x + ", -" + h.y + ")", transform: "translate(-" + h.x + ", -" + h.y + ")", visibility: "hidden", opacity: 0 }).one("canplaythrough.vide", function () { r.resize() }).one("playing.vide", function () { t.css({ visibility: "visible", opacity: 1 }), n.css("background-image", "none") }), l.on("resize.vide", function () { g.resizing && r.resize() }), n.append(t) }, n.prototype.getVideoObject = function () { return this.$video[0] }, n.prototype.resize = function () { if (this.$video) { var e = this.$wrapper, t = this.$video, o = t[0], i = o.videoHeight, n = o.videoWidth, r = e.height(), s = e.width(); s / n > r / i ? t.css({ width: s + 2, height: p }) : t.css({ width: c, height: r + 2 }) } }, n.prototype.destroy = function () { delete e[r].lookup[this.index], this.$video && this.$video.off(r), this.$element.off(r).removeData(r), this.$wrapper.remove() }, e[r] = { lookup: [] }, e.fn[r] = function (t, o) { var i; return this.each(function () { (i = e.data(this, r)) && i.destroy(), (i = new n(this, t, o)).index = e[r].lookup.push(i) - 1, e.data(this, r, i) }), this }, e(document).ready(function () { var t = e(window); t.on("resize.vide", function () { for (var t, o = e[r].lookup.length, i = 0; i < o; i++)(t = e[r].lookup[i]) && t.settings.resizing && t.resize() }), t.on("unload.vide", function () { return !1 }), e(document).find("[data-vide-bg]").each(function (t, o) { var i = e(o), n = i.data("vide-options"), s = i.data("vide-bg"); i[r](s, n) }) }) });

